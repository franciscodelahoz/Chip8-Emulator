import pluginJs from '@eslint/js';
import stylistic from '@stylistic/eslint-plugin';
import stylisticJs from '@stylistic/eslint-plugin-js';
import stylisticTs from '@stylistic/eslint-plugin-ts';
import tsParser from '@typescript-eslint/parser';
import importPlugin from 'eslint-plugin-import';
import eslintPluginUnicorn from 'eslint-plugin-unicorn';
import globals from 'globals';
import tseslint from 'typescript-eslint';

/** @type {import('eslint').Linter.Config[]} */
export default [
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  {
    ignores: [ 'dist/**', 'node_modules/**' ],
  },
  {
    files           : [ 'src/**/*.{js,jsx,ts,tsx}', 'webpack.config.{js,ts}', 'eslint.config.{js,ts}' ],
    languageOptions : {
      parser      : tsParser,
      ecmaVersion : 'latest',
      sourceType  : 'module',
      globals     : globals.browser,
    },
    plugins: {
      '@stylistic/ts' : stylisticTs,
      '@stylistic/js' : stylisticJs,
      import          : importPlugin,
      '@stylistic'    : stylistic,
      unicorn         : eslintPluginUnicorn,
    },
    rules: {
      '@stylistic/js/semi'                    : [ 'error', 'always' ],
      '@stylistic/js/quotes'                  : [ 'error', 'single', { allowTemplateLiterals: true } ],
      '@stylistic/ts/indent'                  : [ 'error', 2 ],
      'no-plusplus'                           : 'error',
      '@stylistic/js/array-bracket-newline'   : [ 'error', 'consistent' ],
      '@stylistic/js/object-property-newline' : [ 'error', { allowAllPropertiesOnSameLine: true } ],
      'no-useless-constructor'                : 'off',
      '@stylistic/js/max-len'                 : [
        'error',
        {
          code                   : 130,
          ignoreStrings          : true,
          ignoreComments         : true,
          ignoreUrls             : true,
          ignoreTemplateLiterals : true,
          ignoreRegExpLiterals   : true,
        },
      ],
      'max-classes-per-file'                      : [ 'error', 1 ],
      'no-continue'                               : 'off',
      'no-restricted-globals'                     : 'off',
      '@stylistic/js/linebreak-style'             : [ 'error', 'unix' ],
      '@stylistic/js/space-before-function-paren' : [
        'error',
        {
          asyncArrow : 'always',
          anonymous  : 'always',
          named      : 'never',
        },
      ],
      'no-await-in-loop'       : 'off',
      'no-restricted-syntax'   : 'off',
      'no-throw-literal'       : 'error',
      'max-lines-per-function' : [
        'off',
        {
          max            : 50,
          skipBlankLines : true,
          skipComments   : true,
          IIFEs          : true,
        },
      ],
      '@stylistic/js/array-bracket-spacing' : [ 'error', 'always' ],
      'no-unused-vars'                      : [
        'off',
        {
          vars               : 'all',
          args               : 'none',
          ignoreRestSiblings : true,
        },
      ],
      '@stylistic/js/key-spacing': [
        'error',
        {
          align: {
            beforeColon : true,
            afterColon  : true,
            on          : 'colon',
          },
        },
      ],
      'global-require'         : 'off',
      'class-methods-use-this' : 'off',
      'import/order'           : [
        'error',
        {
          groups             : [ [ 'builtin', 'external' ], 'internal', [ 'parent', 'sibling' ], 'index', 'object' ],
          'newlines-between' : 'always',
          alphabetize        : {
            order           : 'asc',
            caseInsensitive : true,
          },
        },
      ],
      'import/no-extraneous-dependencies': [
        'error',
        {
          devDependencies: [
            'test/**',
            'tests/**',
            'spec/**',
            '**/__tests__/**',
            '**/__mocks__/**',
            'test.{js,jsx}',
            'test-*.{js,jsx}',
            '**/*{.,_}{test,spec}.{js,jsx}',
            '**/jest.config.js',
            '**/jest.setup.js',
            '**/vue.config.js',
            '**/webpack.config.{js,ts}',
            '**/webpack.config.*.{js,ts}',
            '**/rollup.config.js',
            '**/rollup.config.*.js',
            '**/gulpfile.js',
            '**/gulpfile.*.js',
            '**/Gruntfile{,.js}',
            '**/protractor.conf.js',
            '**/protractor.conf.*.js',
            '**/karma.conf.js',
            '**/.eslintrc.js',
            '**/eslint.config.js',
          ],
          optionalDependencies: false,
        },
      ],
      'import/no-mutable-exports'       : 'error',
      'import/no-duplicates'            : 'error',
      'import/no-absolute-path'         : 'error',
      'import/no-self-import'           : 'error',
      'import/no-useless-path-segments' : [ 'error', { commonjs: true } ],
      'import/no-cycle'                 : [ 'error', { maxDepth: 2 } ],
      'import/no-unused-modules'        : [
        'off',
        {
          ignoreExports  : [],
          missingExports : true,
          unusedExports  : true,
        },
      ],
      strict                          : [ 'error', 'never' ],
      camelcase                       : 'off',
      'space-before-blocks'           : [ 'error', 'always' ],
      'for-direction'                 : 'error',
      'getter-return'                 : [ 'error', { allowImplicit: true } ],
      'no-async-promise-executor'     : 'error',
      'no-compare-neg-zero'           : 'error',
      'no-cond-assign'                : [ 'error', 'always' ],
      'no-constant-binary-expression' : 'off',
      'no-constant-condition'         : 'warn',
      'no-control-regex'              : 'error',
      'no-debugger'                   : 'error',
      'no-dupe-args'                  : 'error',
      'no-dupe-else-if'               : 'error',
      'no-dupe-keys'                  : 'error',
      'no-duplicate-case'             : 'error',
      'no-empty'                      : 'error',
      'no-empty-character-class'      : 'error',
      'no-ex-assign'                  : 'error',
      'no-extra-boolean-cast'         : 'error',
      'no-extra-semi'                 : 'error',
      'no-func-assign'                : 'error',
      'no-import-assign'              : 'error',
      'no-inner-declarations'         : 'error',
      'no-invalid-regexp'             : 'error',
      'no-irregular-whitespace'       : 'error',
      'no-loss-of-precision'          : 'error',
      'no-misleading-character-class' : 'error',
      'no-obj-calls'                  : 'error',
      'no-promise-executor-return'    : 'error',
      'no-prototype-builtins'         : 'error',
      'no-regex-spaces'               : 'error',
      'no-setter-return'              : 'error',
      'no-sparse-arrays'              : 'error',
      'no-template-curly-in-string'   : 'error',
      'no-unexpected-multiline'       : 'error',
      'no-unreachable'                : 'error',
      'no-unreachable-loop'           : [ 'error', { ignore: [] } ],
      'no-unsafe-finally'             : 'error',
      'no-unsafe-negation'            : 'error',
      'no-unsafe-optional-chaining'   : [ 'error', { disallowArithmeticOperators: true } ],
      'no-useless-backreference'      : 'error',
      'use-isnan'                     : 'error',
      'valid-typeof'                  : [ 'error', { requireStringLiterals: true } ],
      'arrow-body-style'              : [ 'error', 'as-needed', { requireReturnForObjectLiteral: false } ],
      '@stylistic/js/arrow-parens'    : [ 'error', 'always' ],
      '@stylistic/js/arrow-spacing'   : [
        'error',
        {
          before : true,
          after  : true,
        },
      ],
      'constructor-super'                    : 'error',
      '@stylistic/js/generator-star-spacing' : [
        'error',
        {
          before : false,
          after  : true,
        },
      ],
      'no-class-assign'                  : 'error',
      '@stylistic/js/no-confusing-arrow' : [ 'error', { allowParens: true } ],
      'no-const-assign'                  : 'error',
      'no-dupe-class-members'            : 'error',
      'no-duplicate-imports'             : 'off',
      'no-new-symbol'                    : 'error',
      'no-restricted-exports'            : [ 'error', { restrictedNamedExports: [ 'default', 'then' ] } ],
      'no-this-before-super'             : 'error',
      'no-useless-computed-key'          : 'error',
      'no-useless-rename'                : [
        'error',
        {
          ignoreDestructuring : false,
          ignoreImport        : false,
          ignoreExport        : false,
        },
      ],
      'no-var'           : 'error',
      'object-shorthand' : [
        'error',
        'always',
        {
          ignoreConstructors : false,
          avoidQuotes        : true,
        },
      ],
      'prefer-arrow-callback': [
        'error',
        {
          allowNamedFunctions : false,
          allowUnboundThis    : true,
        },
      ],
      'prefer-const': [
        'error',
        {
          destructuring          : 'any',
          ignoreReadBeforeAssign : true,
        },
      ],
      'prefer-destructuring': [
        'error',
        {
          VariableDeclarator: {
            array  : false,
            object : true,
          },
          AssignmentExpression: {
            array  : true,
            object : false,
          },
        },
        { enforceForRenamedProperties: false },
      ],
      'prefer-numeric-literals'              : 'error',
      'prefer-rest-params'                   : 'error',
      'prefer-spread'                        : 'error',
      'prefer-template'                      : 'error',
      'require-yield'                        : 'error',
      '@stylistic/js/rest-spread-spacing'    : [ 'error', 'never' ],
      'symbol-description'                   : 'error',
      '@stylistic/js/template-curly-spacing' : 'error',
      '@stylistic/js/yield-star-spacing'     : [ 'error', 'after' ],
      'array-callback-return'                : [ 'error', { allowImplicit: true } ],
      'block-scoped-var'                     : 'error',
      'consistent-return'                    : 'error',
      curly                                  : [ 'error', 'multi-line' ],
      'default-case-last'                    : 'error',
      'default-param-last'                   : 'error',
      'dot-notation'                         : [ 'error', { allowKeywords: true } ],
      '@stylistic/js/dot-location'           : [ 'error', 'property' ],
      eqeqeq                                 : [ 'error', 'always' ],
      'grouped-accessor-pairs'               : 'error',
      'no-caller'                            : 'error',
      'no-case-declarations'                 : 'error',
      'no-constructor-return'                : 'error',
      'no-else-return'                       : [ 'error', { allowElseIf: false } ],
      'no-empty-function'                    : [ 'error', { allow: [ 'arrowFunctions', 'constructors' ] } ],
      'no-empty-pattern'                     : 'error',
      'no-eq-null'                           : 'error',
      'no-eval'                              : 'error',
      'no-extend-native'                     : 'error',
      'no-extra-bind'                        : 'error',
      'no-extra-label'                       : 'error',
      'no-fallthrough'                       : 'error',
      'no-floating-decimal'                  : 'error',
      'no-global-assign'                     : [ 'error', { exceptions: [] } ],
      'no-implied-eval'                      : 'error',
      'no-iterator'                          : 'error',
      'no-labels'                            : [
        'error',
        {
          allowLoop   : false,
          allowSwitch : false,
        },
      ],
      'no-lone-blocks'                : 'error',
      'no-loop-func'                  : 'error',
      '@stylistic/js/no-multi-spaces' : [ 'error', { ignoreEOLComments: false } ],
      'no-multi-str'                  : 'error',
      'no-new'                        : 'error',
      'no-new-func'                   : 'error',
      'no-new-wrappers'               : 'error',
      'no-octal'                      : 'error',
      'no-octal-escape'               : 'error',
      'no-param-reassign'             : [
        'error',
        {
          props: false,
        },
      ],
      'no-proto'                     : 'error',
      'no-redeclare'                 : 'error',
      'no-return-assign'             : [ 'error', 'always' ],
      'no-return-await'              : 'off',
      'no-script-url'                : 'error',
      'no-self-assign'               : [ 'error', { props: true } ],
      'no-self-compare'              : 'error',
      'no-sequences'                 : 'error',
      'no-unused-labels'             : 'error',
      'no-useless-catch'             : 'error',
      'no-useless-concat'            : 'error',
      'no-useless-escape'            : 'error',
      'no-useless-return'            : 'error',
      'no-void'                      : 'error',
      'prefer-promise-reject-errors' : [ 'error', { allowEmptyReject: true } ],
      'prefer-regex-literals'        : [ 'error', { disallowRedundantWrapping: true } ],
      radix                          : 'error',
      'vars-on-top'                  : 'error',
      '@stylistic/js/wrap-iife'      : [ 'error', 'outside', { functionPrototypeMethods: false } ],
      yoda                           : 'error',
      'array-element-newline'        : [
        'off',
        {
          multiline : true,
          minItems  : 3,
        },
      ],
      '@stylistic/js/block-spacing' : [ 'error', 'always' ],
      '@stylistic/js/brace-style'   : [ 'error', '1tbs', { allowSingleLine: true } ],
      '@stylistic/ts/comma-dangle'  : [
        'error',
        {
          arrays    : 'always-multiline',
          objects   : 'always-multiline',
          imports   : 'always-multiline',
          exports   : 'always-multiline',
          functions : 'always-multiline',
          enums     : 'always-multiline',
          generics  : 'always-multiline',
          tuples    : 'always-multiline',
        },
      ],
      '@stylistic/js/comma-spacing': [
        'error',
        {
          before : false,
          after  : true,
        },
      ],
      '@stylistic/js/comma-style': [
        'error',
        'last',
        {
          exceptions: {
            ArrayExpression         : false,
            ArrayPattern            : false,
            ArrowFunctionExpression : false,
            CallExpression          : false,
            FunctionDeclaration     : false,
            FunctionExpression      : false,
            ImportDeclaration       : false,
            ObjectExpression        : false,
            ObjectPattern           : false,
            VariableDeclaration     : false,
            NewExpression           : false,
          },
        },
      ],
      '@stylistic/js/template-tag-spacing'           : [ 'error', 'always' ],
      '@stylistic/js/computed-property-spacing'      : [ 'error', 'never' ],
      '@stylistic/js/eol-last'                       : [ 'error', 'always' ],
      '@stylistic/js/function-call-argument-newline' : [ 'error', 'consistent' ],
      '@stylistic/js/function-call-spacing'          : [ 'error', 'never' ],
      'func-names'                                   : 'warn',
      '@stylistic/js/function-paren-newline'         : [ 'error', 'multiline-arguments' ],
      '@stylistic/js/implicit-arrow-linebreak'       : 'off',
      '@stylistic/js/keyword-spacing'                : [
        'error',
        {
          before    : true,
          after     : true,
          overrides : {
            return : { after: true },
            throw  : { after: true },
            case   : { after: true },
          },
        },
      ],
      '@stylistic/js/quote-props': [
        'error',
        'as-needed',
        {
          keywords    : false,
          unnecessary : true,
          numbers     : false,
        },
      ],
      '@stylistic/ts/lines-between-class-members': [
        'error',
        'always',
        { exceptAfterSingleLine: false },
      ],
      'max-nested-callbacks' : [ 'error', 3 ],
      'max-params'           : [ 'error', 4 ],
      'new-cap'              : [
        'error',
        {
          newIsCap           : true,
          newIsCapExceptions : [],
          capIsNew           : false,
          capIsNewExceptions : [ 'Immutable.Map', 'Immutable.Set', 'Immutable.List' ],
        },
      ],
      '@stylistic/js/new-parens'               : 'error',
      '@stylistic/js/newline-per-chained-call' : [ 'error', { ignoreChainWithDepth: 2 } ],
      'no-array-constructor'                   : 'error',
      'no-lonely-if'                           : 'error',
      '@stylistic/js/no-mixed-operators'       : [
        'error',
        {
          groups: [
            [ '%', '**' ],
            [ '%', '+' ],
            [ '%', '-' ],
            [ '%', '*' ],
            [ '%', '/' ],
            [ '/', '*' ],
            [ '&', '|', '<<', '>>', '>>>' ],
            [ '==', '!=', '===', '!==' ],
            [ '&&', '||' ],
          ],
          allowSamePrecedence: false,
        },
      ],
      '@stylistic/js/no-mixed-spaces-and-tabs' : 'error',
      'no-multi-assign'                        : 'error',
      '@stylistic/js/no-multiple-empty-lines'  : [
        'error',
        {
          max    : 1,
          maxBOF : 0,
          maxEOF : 0,
        },
      ],
      'no-nested-ternary'                : 'error',
      'no-object-constructor'            : 'error',
      '@stylistic/js/no-tabs'            : 'error',
      '@stylistic/js/no-trailing-spaces' : [
        'error',
        {
          skipBlankLines : false,
          ignoreComments : false,
        },
      ],
      'no-underscore-dangle': [
        'error',
        {
          allow                : [],
          allowAfterThis       : false,
          allowAfterSuper      : false,
          enforceInMethodNames : true,
        },
      ],
      'no-unneeded-ternary'                            : [ 'error', { defaultAssignment: false } ],
      '@stylistic/js/no-whitespace-before-property'    : 'error',
      '@stylistic/js/nonblock-statement-body-position' : [ 'error', 'beside', { overrides: {} } ],
      '@stylistic/js/object-curly-spacing'             : [ 'error', 'always' ],
      '@stylistic/ts/object-curly-newline'             : [
        'error',
        {
          ObjectExpression: {
            minProperties : 3,
            multiline     : true,
            consistent    : true,
          },
          ObjectPattern: {
            minProperties : 6,
            multiline     : true,
            consistent    : true,
          },
          ImportDeclaration: {
            multiline     : true,
            minProperties : 4,
          },
          ExportDeclaration: {
            minProperties : 4,
            multiline     : true,
            consistent    : true,
          },
        },
      ],
      'one-var'                                    : [ 'error', 'never' ],
      '@stylistic/js/one-var-declaration-per-line' : [ 'error', 'always' ],
      'operator-assignment'                        : [ 'error', 'always' ],
      '@stylistic/js/operator-linebreak'           : [
        'error',
        'before',
        {
          overrides: {
            '=>' : 'after',
            '='  : 'after',
            '?'  : 'after',
            ':'  : 'after',
          },
        },
      ],
      '@stylistic/js/padded-blocks': [
        'error',
        {
          blocks   : 'never',
          classes  : 'never',
          switches : 'never',
        },
        { allowSingleLineBlocks: true },
      ],
      'prefer-exponentiation-operator' : 'error',
      'prefer-object-spread'           : 'error',
      '@stylistic/js/semi-spacing'     : [
        'error',
        {
          before : false,
          after  : true,
        },
      ],
      '@stylistic/js/semi-style'      : [ 'error', 'last' ],
      '@stylistic/js/space-in-parens' : [ 'error', 'never' ],
      '@stylistic/js/space-infix-ops' : 'error',
      'space-unary-ops'               : [
        'error',
        {
          words     : true,
          nonwords  : false,
          overrides : {},
        },
      ],
      '@stylistic/js/spaced-comment': [
        'error',
        'always',
        {
          line: {
            exceptions : [ '-', '+' ],
            markers    : [ '=', '!', '/' ],
          },
          block: {
            exceptions : [ '-', '+' ],
            markers    : [ '=', '!', ':', '::' ],
            balanced   : true,
          },
        },
      ],
      '@stylistic/js/switch-colon-spacing': [
        'error',
        {
          after  : true,
          before : false,
        },
      ],
      'unicode-bom'                           : [ 'error', 'never' ],
      '@stylistic/ts/type-annotation-spacing' : [
        'error',
        {
          before    : false,
          after     : true,
          overrides : {
            arrow: {
              before : true,
              after  : true,
            },
          },
        },
      ],
      '@stylistic/ts/member-delimiter-style'  : 'error',
      'unicorn/number-literal-case'           : 'error',
      'unicorn/new-for-builtins'              : 'error',
      '@stylistic/js/wrap-regex'              : 'error',
      'unicorn/filename-case'                 : [ 'error', { case: 'kebabCase' } ],
      'unicorn/no-hex-escape'                 : 'error',
      'unicorn/error-message'                 : 'error',
      'unicorn/no-unreadable-iife'            : 'error',
      'unicorn/no-useless-length-check'       : 'error',
      'unicorn/no-zero-fractions'             : 'error',
      'unicorn/no-useless-switch-case'        : 'error',
      'unicorn/switch-case-braces'            : [ 'error', 'always' ],
      'unicorn/text-encoding-identifier-case' : 'error',
      'unicorn/prefer-modern-dom-apis'        : 'error',
      'unicorn/prefer-export-from'            : 'error',
      'unicorn/prefer-date-now'               : 'error',
      'unicorn/prefer-math-min-max'           : 'error',
      'unicorn/prefer-keyboard-event-key'     : 'error',
      'unicorn/prefer-code-point'             : 'error',
      'unicorn/prefer-blob-reading-methods'   : 'error',
      'unicorn/no-useless-undefined'          : 'error',
      'unicorn/no-console-spaces'             : 'error',
      'unicorn/prefer-add-event-listener'     : 'error',
    },
  },
  {
    files           : [ 'src/**/*.{ts,tsx}' ],
    languageOptions : {
      parserOptions: {
        tsconfigRootDir : import.meta.dirname,
        project         : [ './tsconfig.json' ],
      },
    },
    rules: {
      '@typescript-eslint/no-base-to-string'                      : [ 'error', { ignoredTypeNames: [ 'RegExp' ] } ],
      '@typescript-eslint/no-extra-non-null-assertion'            : 'error',
      '@typescript-eslint/no-for-in-array'                        : 'error',
      '@typescript-eslint/no-implied-eval'                        : 'error',
      '@typescript-eslint/no-unnecessary-boolean-literal-compare' : 'error',
      '@typescript-eslint/prefer-includes'                        : 'error',
      '@typescript-eslint/prefer-optional-chain'                  : 'error',
      '@typescript-eslint/prefer-reduce-type-parameter'           : 'error',
      '@typescript-eslint/prefer-string-starts-ends-with'         : 'error',
      '@typescript-eslint/require-array-sort-compare'             : 'error',
      '@typescript-eslint/restrict-plus-operands'                 : 'error',
      '@typescript-eslint/await-thenable'                         : 'warn',
      '@typescript-eslint/no-explicit-any'                        : [
        'error',
        {
          fixToUnknown: false,
        },
      ],
      '@typescript-eslint/consistent-type-imports': [
        'error',
        {
          prefer                  : 'type-imports',
          disallowTypeAnnotations : false,
          fixStyle                : 'separate-type-imports',
        },
      ],
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          args               : 'none',
          ignoreRestSiblings : true,
        },
      ],
      '@typescript-eslint/array-type'        : [ 'error', { default: 'array-simple' } ],
      '@typescript-eslint/naming-convention' : [
        'error',
        {
          selector : 'default',
          format   : [ 'camelCase', 'PascalCase' ],
        },
        {
          selector : 'property',
          filter   : '__type',
          format   : null,
        },
        {
          selector : 'property',
          filter   : '__name',
          format   : null,
        },
        {
          selector : 'property',
          filter   : {
            regex : '.*(.| ).*',
            match : true,
          },
          format: null,
        },
        {
          selector : 'property',
          format   : [ 'camelCase', 'snake_case', 'PascalCase' ],
        },
        {
          selector : 'enumMember',
          filter   : {
            regex : '^[0-9]+.*',
            match : true,
          },
          format: null,
        },
        {
          selector : 'enumMember',
          format   : [ 'camelCase', 'snake_case', 'PascalCase', 'UPPER_CASE' ],
        },
        {
          selector : 'class',
          format   : [ 'PascalCase' ],
        },
        {
          selector : 'interface',
          format   : [ 'PascalCase' ],
        },
        {
          selector : 'enum',
          format   : [ 'PascalCase' ],
        },
        {
          selector : 'variable',
          format   : [ 'camelCase', 'PascalCase', 'UPPER_CASE' ],
        },
        {
          selector  : 'variable',
          modifiers : [ 'destructured' ],
          format    : [ 'camelCase', 'PascalCase', 'UPPER_CASE', 'snake_case' ],
        },
        {
          selector : 'parameterProperty',
          format   : [ 'camelCase', 'PascalCase' ],
        },
        {
          selector          : 'parameter',
          modifiers         : [ 'destructured' ],
          format            : [ 'camelCase', 'PascalCase', 'snake_case' ],
          leadingUnderscore : 'allow',
        },
        {
          selector          : 'parameter',
          format            : [ 'camelCase', 'PascalCase' ],
          leadingUnderscore : 'allow',
        },
      ],
      '@typescript-eslint/no-shadow'          : 'error',
      '@stylistic/ts/type-annotation-spacing' : [
        'error',
        {
          before    : false,
          after     : true,
          overrides : {
            arrow: {
              before : true,
              after  : true,
            },
          },
        },
      ],
      '@stylistic/type-generic-spacing'            : [ 'error' ],
      '@stylistic/padding-line-between-statements' : [
        'error',
        {
          blankLine : 'always',
          prev      : '*',
          next      : [ 'enum', 'interface', 'type' ],
        },
        {
          blankLine : 'always',
          prev      : [ 'enum', 'interface', 'type' ],
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : [ 'case', 'default' ],
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : 'if',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'if',
        },
        {
          blankLine : 'always',
          prev      : 'function',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'function',
        },
        {
          blankLine : 'always',
          prev      : 'export',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'export',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'return',
        },
        {
          blankLine : 'always',
          prev      : 'import',
          next      : [ 'const', 'let', 'var', 'function', 'class', 'expression', 'export' ],
        },
        {
          blankLine : 'always',
          prev      : [ 'const', 'let', 'var' ],
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : [ 'const', 'let', 'var' ],
        },
        {
          blankLine : 'any',
          prev      : [ 'const', 'let', 'var' ],
          next      : [ 'const', 'let', 'var' ],
        },
        {
          blankLine : 'any',
          prev      : 'block-like',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : 'directive',
          next      : '*',
        },
        {
          blankLine : 'any',
          prev      : 'directive',
          next      : 'directive',
        },
        {
          blankLine : 'always',
          prev      : 'for',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'for',
        },
        {
          blankLine : 'always',
          prev      : 'block-like',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'block-like',
        },
        {
          blankLine : 'always',
          prev      : 'do',
          next      : '*',
        },
        {
          blankLine : 'always',
          prev      : '*',
          next      : 'do',
        },
      ],
      '@stylistic/ts/no-extra-parens': [
        'error',
        'all',
        {
          nestedBinaryExpressions         : false,
          ternaryOperandBinaryExpressions : false,
          conditionalAssign               : false,
        },
      ],
      '@typescript-eslint/typedef': [
        'error',
        {
          arrayDestructuring        : false,
          arrowParameter            : false,
          memberVariableDeclaration : true,
          objectDestructuring       : false,
          parameter                 : false,
          propertyDeclaration       : true,
          variableDeclaration       : false,
        },
      ],
      '@typescript-eslint/return-await'                           : 'error',
      '@typescript-eslint/no-array-delete'                        : 'error',
      '@typescript-eslint/no-this-alias'                          : 'error',
      '@typescript-eslint/no-unsafe-enum-comparison'              : 'error',
      '@typescript-eslint/explicit-function-return-type'          : 'error',
      '@typescript-eslint/require-await'                          : 'error',
      '@typescript-eslint/no-misused-spread'                      : 'error',
      '@typescript-eslint/no-mixed-enums'                         : 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain'    : 'error',
      '@typescript-eslint/no-non-null-assertion'                  : 'error',
      '@typescript-eslint/no-redundant-type-constituents'         : 'error',
      '@typescript-eslint/no-require-imports'                     : 'error',
      '@typescript-eslint/no-unnecessary-template-expression'     : 'error',
      '@typescript-eslint/no-unnecessary-type-arguments'          : 'error',
      '@typescript-eslint/no-unnecessary-type-assertion'          : 'error',
      '@typescript-eslint/no-unsafe-call'                         : 'error',
      '@typescript-eslint/prefer-as-const'                        : 'error',
      '@typescript-eslint/prefer-enum-initializers'               : 'error',
      '@typescript-eslint/prefer-find'                            : 'error',
      '@typescript-eslint/prefer-for-of'                          : 'error',
      '@typescript-eslint/prefer-readonly'                        : 'error',
      '@typescript-eslint/promise-function-async'                 : 'error',
      '@typescript-eslint/related-getter-setter-pairs'            : 'error',
      '@typescript-eslint/restrict-template-expressions'          : 'error',
      '@typescript-eslint/sort-type-constituents'                 : 'error',
      '@typescript-eslint/switch-exhaustiveness-check'            : 'error',
      '@typescript-eslint/triple-slash-reference'                 : 'error',
      '@typescript-eslint/unbound-method'                         : 'error',
      '@typescript-eslint/unified-signatures'                     : 'error',
      '@typescript-eslint/use-unknown-in-catch-callback-variable' : 'error',
    },
  },
  {
    languageOptions: {
      globals: globals.browser,
    },
  },
];
